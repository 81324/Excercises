/**
 * @Description 找出数组中重复的数字
 *
 * @author zx
 */

/*
 * 题目：在一个长度为n的数组里的所有数字都在0到n-1的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，
 * 也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2, 3, 1, 0, 2, 5, 3}，
 * 那么对应的输出是重复的数字2或者3。
 */

/*
 * 思路：如果数组中没有重复数字，则arr[i] = i
 *      如果数组中有重复数字，有些数字在本不是其位置上出现了多次
 * 边界条件： 空数组 数组中元素越界
 *      遍历该数组
 *      判断下标与该元素是否对应
 *      如果不对应，判断该元素与其本应该出现的位置上的元素是否相等；
 *      如果相等，则其即为重复元素；如果不相等，则交换两个元素的位置
 */
public class DuplicationDemo {
public int getDuplication(int[] arr) {
    if (arr == null || arr.length <= 0) {
        System.out.println("数组输入有误！");
        return -1;
    }
    for (int a : arr) {
        if (a < 0 || a > arr.length-1) {
            System.out.println("数组元素越界");
            return -1;
        }
    }
    for (int i = 0; i < arr.length; i++) {
        while (arr[i] != i) {
            if (arr[i] == arr[arr[i]]) {
                return arr[i];
            }
            int temp = arr[i];
            arr[i] = arr[temp];
            arr[temp] = temp;
        }
    }
    System.out.println("数组中无重复数字");
    return -1;
}
    public void test1(){
        //数组带重复数字
        int[] arr = {2,3,1,0,2,5,3};
        int duplication = getDuplication(arr);
        if (duplication > 0){
            System.out.println("重复数字为："+duplication);
        }
    }
    public void test2(){
        //数组不带重复数字
        int[] arr = {0,2,1,3,4,5,6};
        int duplication = getDuplication(arr);
        if (duplication > 0){
            System.out.println("重复数字为："+duplication);
        }
    }
    public void test3(){
        //数组边界越界
        int[] arr = {1,2,3,4,5,9,8};
        int duplication = getDuplication(arr);
        if (duplication > 0){
            System.out.println("重复数字为："+duplication);
        }
    }
    public void test4(){
        //空数组
        int[] arr = {};
        int duplication = getDuplication(arr);
        if (duplication > 0){
            System.out.println("重复数字为："+duplication);
        }
    }
}
public class DuplicationMain {
    public static void main(String[] args) {
        DuplicationDemo duplicationDemo = new DuplicationDemo();
        duplicationDemo.test1();
        duplicationDemo.test2();
        duplicationDemo.test3();
        duplicationDemo.test4();
    }
}
